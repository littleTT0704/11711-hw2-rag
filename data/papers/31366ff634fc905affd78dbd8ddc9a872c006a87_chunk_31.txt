,000
70,000
60,000
50,000
40,000
30,000
20,000
10,000
0
0 10 20 30 40 50
k
Figure8:Distinguishabilitybyexponentiatingtheorig-
inalCodeBERTScorebyk.
We thus argue that distinguishability is not
a reliable meta-metric and is no substitute for
execution-based-orhuman-rating. Wefurthersus-
pectthatanymeta-metricthatcomparesexact,ab-
solute, scores across different metrics is suscepti-
bletosuchmanipulations,andthereliablewayto
comparemetricsisaccordingtothewaytheyrank
differentexamples,ratherthantheexactscores.
The distinguishability results of
CodeBERTScorek with different values of k
are shown in Figure 8. As Figure 8 shows, the
distinguishability increases almost exponentially
with the increasing value of k. We thus argue
that distinguishability is not a reliable meta-
metric and is no substitute for execution-based-
or human-rating. We further suspect that any
meta-metric that compares exact, absolute, scores
across different metrics is susceptible to such
manipulations, and the reliable way to compare
metricsisaccordingtothewaytheyrankdifferent
examples,ratherthantheexactscores.
G AdditionalExamples
In this section, we provide additional examples
inwhichCodeBERTScoreprefersthefunctionally
correct prediction, while the best baseline metric
in each language ranks higher a functionally in-
correctprediction,whichisinequivalenttotheref-
erence. Figure 9 shows an example in Java, and
Figure10showsaC++example.
NaturalLanguageQuestion: Reference:
/** public static int howManyTimes(String string,
Find how many times a given String substring) {
substring can be found in int times = 0;
the original string. for (int i = 0; i < string.length() -
Count overlaping cases. substring.length() + 1; i++) {
>>> howManyTimes("", "a") if (string.substring(i, i + substring.length())
0.equals(substring)) {
>>> howManyTimes