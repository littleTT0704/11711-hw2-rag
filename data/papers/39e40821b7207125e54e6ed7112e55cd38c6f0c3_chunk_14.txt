 “supports”/“counters”),andthestructuredoutputis
and the entities are give, we construct the input anexplanationgraph(Figure4).
stringuntiltheinitfunction,andweappenditto We use the EXPLAGRAPHS dataset for this
thefew-shotpromptsforpredictions. task(Sahaetal.,2021). Sincewefocusongenerat-
ingtheargumentgraph,wetakethestanceasgiven
Metrics WefollowDalvietal.(2018)andmea- andusethestancethatwaspredictedbyastance
sureprecision,recallandF 1 scoreofthepredicted predictionmodelreleasedbySahaetal..
entitystates. Werandomlysampledthreeexamples To convert an EXPLAGRAPHS to Python, the
fromthetrainingsetasthefew-shotprompt. belief, argument, and stance are instantiated as
string variables. Next, we define the graph struc-
Results As shown in Table 3, COCOGEN turebyspecifyingtheedges. Unlike PROSCRIPT,
achieves a significantly better F score than
1 the edges in EXPLAGRAPHS are typed. Thus,
DAVINCI. Across the five prompts, COCOGEN
achieves 5.0 higher F 1 than DAVINCI on aver- 3 CURIE often failed to produce output with the desired
format,andthusitshighprecisionandlowrecall.
age. Inaddition,COCOGENyieldsstrongerperfor- 4As of 10/11/2022, https://leaderboard.
mancethanCURIE,achievingF
1
of63.0,whichis allenai.org/propara/submissions/public
class ExplanationDAG:
Factory
Millions def __init__(self):
Farming
causes belief = "factory farming should not be
banned."
hascontext desires argument = "Factory farming feeds millions."
stance = "support"
Necessary Food # Edges
hascontext begin = ["factory farming", "millions"]
add_edge("factory farming", "causes", "food")
add_edge("factory farming", "has context",
not