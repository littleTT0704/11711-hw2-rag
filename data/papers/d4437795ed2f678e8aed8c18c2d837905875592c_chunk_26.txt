 into some appropriate actions (such as database queries, function calls).
This component needs to be designed so that it constrains the recognizer’s search space and
selects the most “meaningful” candidate-word sequence.
Current recognition systems are generally “loosely coupled,” where the recognition com­
ponent delivers a set of candidate sentences to the language-understanding component after
completing its search. A tightly coupled system can potentially provide more accurate recogni­
tion, with the language understanding component working in locked steps with the recognition
component in order to select the most promising partial hypotheses. Such an integration,
November 23,1992 22
however, is very computationally intensive, due to the size of the search space traversed during
recognition. More research needs to be done in this area, especially in developing real-time
tightly coupled systems for incorporating multiple levels of linguistic knowledge (syntax,
semantics, discourse structure) and in providing constraints in the overall recognition process.
4.2.5. Connectionist approach for speech and language processing
Recent research has found that the connectionist approach can provide a cost-effective yet
specialized hardware solution to a number of problems in SNLP (such as continuous speech
recognition). Further research needs to be carried out on connectionist algorithms and represen­
tation methods in the context of realistic tasks, such as the recognition and understanding of
large vocabulary speech. This will allow the integration of knowledge in spoken-language
understanding at the acoustic, syntactic, semantic, and pragmatic levels, as well as data-driven
learning over all of these levels.
A major issue of using the connectionist approach is that the amount of computational
power and communication bandwidth required is large (well into the tera-operations- and tera-
bytes-per-second range), especially when practical and large training sets and neural networks
are concerned. New research need to be conducted in developing efficient yet general experi­
mental hardware and software solutions.
4.3. Implications for System Architectures
Algorithms in SNLP generally require an abundant amount of- computing power and
memory space. This need arises partially from the desire to do real-time analysis. A somewhat
less obvious reason is the need to analyze huge databases in experiments; these experiments will
simply not be done if analysis takes a very long time.
