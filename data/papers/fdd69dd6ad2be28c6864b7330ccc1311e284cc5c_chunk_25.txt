StructureofUSB
Inthissection,weprovideanoverviewofthecodebasestructureofUSB,wherefourabstractlayers
areadopted. Thelayersincludethecorelayer,algorithmlayer,extensionlayer,andAPIlayerinthe
bottomupdirectionasshowninFig.4.
CoreLayer. Inthecorelayer,weimplementthecommonlyusedcorefunctionsfortrainingSSL
algorithms. Besides, the code regarding datasets, data loaders, and models used in USB is also
providedinthecorelayer. Forflexibletraining,weimplementcommontraininghookssimilarto
MMCV[76],whichcanbemodifiedandextendedintheupperlayers.
Algorithm Layer. In the algorithm layer, we first implement the base class for SSL algorithms,
whereweinitializethedatasets,dataloaders,andmodelsfromthecorelayer.Insteadofimplementing
SSLalgorithmsindependentlyasinTorchSSL[21],wefurtherabstracttheSSLalgorithms,enabling
better code reuse and making it easier to implement new algorithms. Except for the standalone
implementationoflossfunctionsusedinSSLalgorithmsandalgorithm-specificconfigurations,we
furtherprovidealgorithmhooksaccordingtothealgorithmcomponentssummarizedinTable4. The
algorithmhooksnotonlyhighlightthecommonpartofdifferentalgorithmsbutalsoallowsforavery
easyandflexiblecombinationofdifferentcomponentstoresembleanewalgorithmorconductan
ablationstudy. Basedonthis,wesupport14coreSSLalgorithmsinUSB,withtwoextrasupervised
learningvariants. MorealgorithmsareexpectedtobeaddedthroughcontinuedextensionofUSB.
ExtensionLayer.TheextensionlayeriswherewefurtherextendthecoreSSLalgorithmstodifferent
applications. ContinutedeffortaremadeontheextensionofcoreSSLalgorithmstoimbalanced
SSLalgorithms[77,78,79,80,81,82,83,84]andopen-setSSLalgorithms[85,86,87,88,89].
Systematicablationstudycanalsobeconductedintheextensionlayerbyinheritingeitherthecore
componentsandalgorithmsfromthecore