("aaa", "a") times += 1;
3 }
>>> howManyTimes("aaaa", "aa") }
3 return times;
*/ }
(a)Thenaturallanguagequestion. (b)Thegroundtruthreference.
Non-equivalentcandidate: Equivalentcandidate:
public static int howManyTimes( public static int howManyTimes(
String string, String substring) { String string, String substring) {
int count = 0; int counter = 0;
int index = 0; int index = 0;
while ((index = string.indexOf( while (true) {
substring, index))!= -1) { index = string.indexOf(substring, index);
count++; if (index == -1)
index += substring.length(); break;
} counter += 1;
return count; index += 1;
} }
return counter;
}
(c)PreferredbyMETEOR. (d)PreferredbyCodeBERTScore.
Figure 9: An example in HumanEval-Java, in which METEOR assigns a higher score to Figure 9(c) which is
notfunctionallyequivalenttothereference(Figure9(b)),whileCodeBERTScoreprefersthefunctionallycorrect
candidateFigure9(d).
NaturalLanguageQuestion: Reference:
/* long specialFilter(
Write a function that takes a vector std::vector<long> nums) {
of numbers as input and returns the int num=0;
number of elements in the vector that for (int i=0;i<nums.size();i++)
are greater than 10 and both first if (nums[i]>10) {
and last digits of a number are odd string w=to_string(nums[i]);
(1, 3, 5, 7, 9). For example: if (w[0]%2==1 and
specialFilter({15, -73, 14, -15}) w[w.length()-1] % 2 == 1)
=> 1 num+=1;
specialFilter({33, -2, -3, 45, 21, 109}) }
=> 2 return num;
*/ }
(a)Thenaturallanguagequestion. (b)Thegroundtruthreference.
Non-equivalentcandidate: Equivalent