 For each question, we
retrieved up to 55 document titles using the following search strategies:
• 50 titles were retrieved with Indri from an index of long documents, which
includes the encyclopedias and all expanded sources.
• 5 titles were retrieved with Indri from an index of short documents, which
includes mostly dictionary entries. Short documents were searched inde-
pendently because the search engine has a bias towards longer documents,
and thus few short documents would be retrieved if the documents were
combined in one index. However, when we used only Wikipedia or Wik-
tionary as seed corpora, it was not necessary to perform two independent
searches, and we instead retrieved 50 titles from a single index.
We used this combination of search strategies and retrieval systems because it was
effective in experiments with Jeopardy! development data. Note that all documents
and most passages are retrieved with Indri, but the Lucene passage searches still
yield a small improvement in search recall. Lucene usually returns different passages
because different query operators and retrieval models are used. For instance, Lucene
can perform fuzzy matches based on the Levenshtein distance and thus can find
relevant text passages that do not exactly match the question terms. While Indri uses
a retrieval model that combines language modeling with inference networks, Lucene
relies on a combination of vector space retrieval and a Boolean retrieval model.
In Table 6.5 we show queries generated by Watson to retrieve passages and doc-
uments from Indri and Lucene indices. The first example is a very short Jeopardy!
clue from the category COMMON BONDS. The Indri queries consist only of individ-
ual keywords extracted from the clue, whereas the Lucene query also uses proximity
operators to give more weight to passages that contain the terms next to each other
(in any order). In Indri, the operator “#combine[passage20:6](...)” retrieves passages
of 20 tokens, using increments of 6 tokens when traversing the indexed documents
and evaluating candidate passages. The caret operator “∧” boosts query terms in
Lucene (or discounts them, if the factor is less than 1), and the tilde symbol “∼”
performs approximate matching, using the Levenshtein distance to measure the sim-
ilarity between terms in the query and the